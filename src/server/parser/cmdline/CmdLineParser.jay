%{
//
// $Id: CmdLineParser.jay,v 2.1.18.1 2013/03/14 10:24:54 ronald Exp $
//
// Copyright (C) 2002 topIT Informationstechnologie GmbH
//
//

package de.independit.scheduler.server.parser.cmdline;

import java.io.*;
import java.util.*;
import java.lang.*;
import de.independit.scheduler.server.repository.*;
import de.independit.scheduler.server.exception.*;
import de.independit.scheduler.server.parser.*;
import de.independit.scheduler.server.output.*;
import de.independit.scheduler.server.*;

public class CmdLineParser 
{

	private int stop = 0;
	private SDMSSubmittedEntity sme = null;
	private SystemEnvironment sysEnv = null;
	private Long smeId = null;
	private boolean checkOnly = false;
%}

%token <String> PARAM CHAR SQSTRING
%token	SEPARATOR DQSTRING_START DQSTRING_END PARAMSTART PARAMEND DOT

%type <Vector> parameterlist, param, dottedparam, parameter, charlist, executablename
%type <String> dqstring, dqlist, optdqlist DQSTRING_START DQSTRING_END

%start cmdline

%%

cmdline:					{ if(stop == 0) return null; }
	|	executablename			{ Vector v = new Vector(); v.addAll($1); if(stop == 0) return v; }
	|	executablename SEPARATOR parameterlist	{ $1.addAll($3); if(stop == 0) return $1; }
	|	executablename SEPARATOR 	{ Vector v = new Vector(); v.addAll($1); if(stop == 0) return v; }

executablename:	charlist			{ $$ = $1; }

parameterlist:	parameter 			{ $$ = new Vector(); $<Vector>$.addAll($1); }
	|	parameterlist SEPARATOR parameter	{ $1.addAll($3); }
	|	parameterlist SEPARATOR 	{ /* do nothing */ }

parameter:	charlist			{ $$ = $1; }

charlist:	CHAR				{ $$ = new Vector(); $<Vector>$.add($1); }
	|	SQSTRING			{ $$ = new Vector(); $<Vector>$.add($1); }
	|	dqstring			{ $$ = new Vector(); $<Vector>$.add($1); }
	|	param				{ $$ = new Vector(); String s = resolve($1); $<Vector>$.addAll(split(s)); }
	|	charlist CHAR			{ String t = null;
						  Vector v = $<Vector>$;
						  if ( v.size() != 0)
							t = (String) v.remove(v.size() -1);
						  if (t != null) t = t.concat($2);
						  else t = $2;
						  v.add(t);
						}
	|	charlist SQSTRING		{ String t = null;
						  Vector v = $<Vector>$;
						  if ( v.size() != 0)
							t = (String) v.remove(v.size() -1);
						  if (t != null) t = t.concat($2);
						  else t = $2;
						  v.add(t);
						}
	|	charlist dqstring		{ String t = null;
						  Vector v = $<Vector>$;
						  if ( v.size() != 0)
							t = (String) v.remove(v.size() -1);
						  if (t != null) t = t.concat($2);
						  else t = $2;
						  v.add(t);
						}
	|	charlist param			{ String s = resolve($2);
						  String t = null;
						  Vector v = $<Vector>$;
						  Vector w;
						  if ( v.size() != 0)
							t = (String) v.remove(v.size() -1);
						  w = split(s);
						  if (t != null) {
							s = (String) w.remove(0);
							t = t.concat(s);
							v.add(t);
						  }
						  v.addAll(w);
						}

dqstring:	DQSTRING_START optdqlist DQSTRING_END	{ $$ = $1 + $2 + $3; }

optdqlist:					{ $$ = new String(""); }
	|	dqlist				{ $$ = $1; }

dqlist:		CHAR				{ $$ = $1; }
	|	param				{ $$ = resolve($1); }
	|	dqlist CHAR			{ $$ = $1.concat($2); }
	|	dqlist param			{ $$ = $1.concat(resolve($2)); }

param:		PARAM				{ $$ = new Vector(); $<Vector>$.add($1); }
	|	PARAMSTART dottedparam PARAMEND	{ $$ = $2; }

dottedparam:	SQSTRING			{ $$ = new Vector(); $<Vector>$.add($1); }

//	|	dottedparam DOT SQSTRING	{ $1.add($3); }



%%

public void set(SystemEnvironment e, SDMSSubmittedEntity sub)
	throws SDMSException
{
	sysEnv = e;
	sme = sub;
	if(sme != null)
		smeId = sub.getId(sysEnv);
}

public void setCheckOnly()
{
	checkOnly = true;
}

void print(Vector v)
{
	if (v == null) System.out.println("v = null");
	else {
		System.out.println("v = {");
		for (int i = 0; i < v.size(); ++i) {
			System.out.println("\t[" + i + "] : " + v.get(i));
		}
		System.out.println("}");
	}
}

Vector split(String s)
		throws SDMSException
{
	Vector result = new Vector();
	String[] sArr;

	if (SystemEnvironment.enhancedCmdParsing) {

/*
		sArr = s.split("[ \t\f\r\n]+");
		for (int i = 0; i < sArr.length; ++i) {
			if (!sArr[i].equals(""))
				result.add(sArr[i]);
		}
*/
			char quote = '\0';
			char escape = '\0';
			char ignore = '\0';
			String element = "";
			for (int i = 0; i < s.length(); i++) {
				char c = s.charAt(i);
				switch (c) {
					case '\'':
						if (quote == '\0' && escape == '\0') {
							quote = '\'';
							// weiterlesen bis zum nÃ¤chsten '
							while (++i < s.length()) {
								c = s.charAt(i);
								if (escape == '\0') {
									if (c != '\\') {
										if (c != '\'') {
											element += c;
										}
										else {
											quote = '\0';
											break;
										}
									}
									else {
										escape = '\\';
									}
								}
								else {
									if (c != '\'' && c != '\\') {
										element += escape;
									}
									element += c;
									escape = '\0';
								}
							}
						}
						else if (quote != '\0') {
							// Double quoted context
							if (escape == '\\') {
								element += escape;
								escape = '\0';
							}
							element += c;
						}
						else {
							// Not quoted escaped (\')
							escape = '\0';
							element += c;
						}
						ignore = '\0';
						break;
					case '"':
						if (quote == '\0') {
							if ( escape == '\0') {
								quote = '\"';
							}
							else {
								escape = '\0';
								element += c;
							}
						}
						else {
							if (escape == '\0') {
								quote = '\0';
							}
							else {
								escape = '\0';
								element += c;
							}
						}
						ignore = '\0';
						break;
					case '\n':
					case '\r':
						if (ignore != '\0' && ignore != c) {
							ignore = '\0';
							break;
						}
						if (quote == '\0') {
							if (escape == '\0') {
								if (element.length() > 0) {
									result.add(element);
									element = "";
								}
							}
							else {
								ignore = c;
								escape = '\0';
							}
						}
						else {
							if (escape == '\\') {
								element += escape;
								escape = '\0';
							}
							element += c;
						}
						break;
					case ' ':
					case '\t':
					case '\f':
						if (quote == '\0') {
							if (escape == '\0') {
								if (element.length() > 0) {
									result.add(element);
									element = "";
								}
							}
							else {
								element += c;
								escape = '\0';
							}
						}
						else {
							if (escape == '\\') {
								element += escape;
								escape = '\0';
							}
							element += c;
						}
						ignore = '\0';
						break;
					case '\\':
						if (escape == '\\') {
							element += escape;
							escape = '\0';
						}
						else {
							escape = '\\';
						}
						ignore = '\0';
						break;
					default:
						if (escape == '\\') {
							element += escape;
						}
						escape = '\0';
						element += c;
						ignore = '\0';
						break;
				}
			}
			if (quote != '\0') {
				throw new CommonErrorException(new SDMSMessage(sysEnv, "03209071136", "Missing $1 in parameter evaluation in: $2", (quote == '"' ? "double quote" : "single quote"), s));
			}
			if (escape == '\\') {
				element += escape;
			}
			if (element.length() > 0) {
				result.add(element);
			}

			// result.add(s);	// DEGUG ONLY remove again !!!!
	} else {
		result.add(s);
	}

	return result;
}

String resolve(Vector pv)
	throws SDMSException
{
	if(checkOnly)	// we only check the correctness of the expression, so we fake variable lookups 
		return new String ("x");
	String rc;
	String pn = (String) pv.remove(pv.size() - 1);

	rc = sme.getVariableValue(sysEnv, pn, false, ParseStr.S_DEFAULT, true);	// full evaluation
	if(rc == null) {
		throw new NotFoundException(new SDMSMessage(sysEnv, "03206041627", "Parameter $1 not found", pn));
	}
	return rc;
}


}
