//
// $Id: MiniScanner.jlex,v 2.10.4.1 2013/03/14 10:25:30 ronald Exp $
//
// Copyright (C) 2001 topIT Informationstechnologie GmbH
//
//
//
package de.independit.scheduler.shell;

import java.lang.*;
import java.util.*;
import java.io.*;

import de.independit.scheduler.server.SDMSConstants;

%%

%public
%class MiniScanner
%implements de.independit.scheduler.shell.MiniParser.yyInput
%type int
%yyeof
%integer

%line
%column
%unicode

%{
private static boolean debug = false;
private boolean inStatement  = false;
private boolean inMultiCmd   = false;
private boolean eatSemiColon = false;

public int yyline()
{
	return yyline + 1;
}

private int token;
private int pos = 0;
private int brctr = 0;
private Object value = new String("");
private Vector dirStack = new Vector();

public boolean advance() throws java.io.IOException
{
	value = new String("");
	token = yylex();
	return (token != YYEOF);
}

public int token()
{
	return token;
}

public Object value() 
{
	if (value instanceof StringBuffer) return value.toString();
	return value;
}

public int pos()
{
	return pos;
}

private void addVal()
{
	if (value instanceof StringBuffer) {
		((StringBuffer) value).append(yytext());
	} else {
		value = new StringBuffer(value.toString() + yytext());
	}
	pos += yytext().length();
}

private void addVal(String s)
{
	if (!(value instanceof StringBuffer)) {
		value = new StringBuffer(value.toString());
	}
	((StringBuffer) value).append(s);
	pos += s.length();
}

private void startInclude(File f)
{
	// push directory
	try {
		File g = f.getAbsoluteFile().getParentFile();
		dirStack.add(g.getCanonicalPath());
	} catch(Exception e) {
		// do nothing
		System.out.println("ERROR: Exception in stack bookkeeping : " + e.toString());
		Runtime.getRuntime().halt(1);
	}
}

private void endInclude()
{
	// pop directory
	dirStack.remove(dirStack.size() - 1);
}

%}

lcomment1 =	"//".*
lcomment2 =	"--".*
lcomment =	{lcomment1}|{lcomment2}
nl =		[\n\r]+
ws =		[ \t\b\015]+
disconnect1 =	[Dd][Ii][Ss][Cc][Oo][Nn][Nn][Ee][Cc][Tt]
disconnect2 =	[Ee][Xx][Ii][Tt]
disconnect3 =	[Qq][Uu][Ii][Tt]
disconnect4 =	[Bb][Yy][Ee]
disconnect =	{disconnect1}|{disconnect2}|{disconnect3}|{disconnect4}
help =		[Hh][Ee][Ll][Pp]
timing =	[Tt][Ii][Mm][Ii][Nn][Gg]
echo =		[Ee][Cc][Hh][Oo]
off =		[Oo][Ff][Ff]
on =		[Oo][Nn]
whenever =	[Ww][Hh][Ee][Nn][Ee][Vv][Ee][Rr]
s_error =	[Ee][Rr][Rr][Oo][Rr]
continue =	[Cc][Oo][Nn][Tt][Ii][Nn][Uu][Ee]
include =	[Ii][Nn][Cc][Ll][Uu][Dd][Ee]
begin =		[Bb][Ee][Gg][Ii][Nn]
end =		[Ee][Nn][Dd]
multicommand =	[Mm][Uu][Ll][Tt][Ii][Cc][Oo][Mm][Mm][Aa][Nn][Dd]
prompt =	[Pp][Rr][Oo][Mm][Pp][Tt]
rollback =	[Rr][Oo][Ll][Ll][Bb][Aa][Cc][Kk]
shell =		"!"
uscore =	(_|[ \n\t\r]+)
number =	[0-9]
bs_quote =	\\'
no_bs_quote =	[^\\']
no_ws_quote =	[^' \t\n\r]+

bmulticmd =	{begin}{uscore}{multicommand}
emulticmd =	{end}{uscore}{multicommand}
timingon =	{timing}{uscore}{on}
timingoff =	{timing}{uscore}{off}
echoon =	{echo}{uscore}{on}
echooff =	{echo}{uscore}{off}

%state	STRING COMMENT FILESPEC FSSTR SHELL
%%

<YYINITIAL>{lcomment}		{ if(inStatement) addVal();					break;		}
<YYINITIAL>{nl}			{ if(inStatement) addVal();					break;		}
<YYINITIAL>{ws}			{ if(inStatement) addVal();					break;		}
<YYINITIAL>"/*"			{ if(inStatement) addVal();		yybegin(COMMENT); 	break;		}
<YYINITIAL>'			{ addVal("'");				yybegin(STRING); 	break;		}
<YYINITIAL>[-/]			{ addVal();		inStatement = true;			break;		}
<YYINITIAL>[^-/;!'a-zA-Z0-9() \t]+	{ addVal();		inStatement = true;			break;		}
<YYINITIAL>"("			{ addVal();		brctr++;				break;		}
<YYINITIAL>")"			{ addVal();		brctr--;				break;		}
<YYINITIAL>;			{ // System.out.print("STATEMENT ");
				  if(!inMultiCmd) {
					addVal(";");
					if (brctr != 0) {
						break;
					}
					inStatement = false;
				  	return MiniParser.STATEMENT;
				  } else {
					if (eatSemiColon) {
						eatSemiColon = false;
						inMultiCmd = false;
						inStatement = false;
						return MiniParser.EOS;
					} else {
						addVal(";");
				  		return MiniParser.STATEMENT;
					}
				  }
				}

<YYINITIAL>{disconnect}		{ if(!inStatement) { 
					// System.out.print("DISCONNECT ");
					return MiniParser.DISCONNECT;
				  } else addVal();
				  break;
				}
<YYINITIAL>{whenever}		{ if(!inStatement) {
					// System.out.print("WHENEVER ");
					return MiniParser.WHENEVER;
				  } else addVal();
				  break;
				}
<YYINITIAL>{s_error}		{ if(!inStatement) {
					// System.out.print("S_ERROR ");
					return MiniParser.S_ERROR;
				  } else addVal();
				  break;
				}
<YYINITIAL>{continue}		{ if(!inStatement) {
					// System.out.print("CONTINUE ");
					return MiniParser.CONTINUE;
				  } else addVal();
				  break;
				}
<YYINITIAL>{include}		{ if(!inStatement) yybegin(FILESPEC);			else	addVal(); break;	}
<YYINITIAL>{timingon}		{ if(!inStatement) { return MiniParser.TIMINGON; }	else	addVal(); break; 	}
<YYINITIAL>{timingoff}		{ if(!inStatement) { return MiniParser.TIMINGOFF; }	else	addVal(); break; 	}
<YYINITIAL>{echoon}		{ if(!inStatement) { return MiniParser.ECHOON; }	else	addVal(); break; 	}
<YYINITIAL>{echooff}		{ if(!inStatement) { return MiniParser.ECHOOFF; }	else	addVal(); break; 	}
<YYINITIAL>{shell}		{ if(!inStatement) { value = new String(""); yybegin(SHELL); } else addVal(); break;	}
<YYINITIAL>{help}		{ if(!inStatement) { return MiniParser.HELP; }		else    addVal(); break;        }
<YYINITIAL>{prompt}		{ if(!inStatement) { return MiniParser.PROMPT; }	else    addVal(); break;        }
<YYINITIAL>{bmulticmd}		{ addVal();
				  inStatement = true;
				  inMultiCmd = true;
				  // System.out.print("BMULTI ");
				  return MiniParser.BMULTI;
				}
<YYINITIAL>{emulticmd}		{ if (inStatement) {
					addVal(";");
					inStatement = false;
					yypushback(((String) yytext()).length());	// so etwas muss es sein
					return MiniParser.STATEMENT;
				  }
				  addVal();
				  eatSemiColon = true;
				  // System.out.print("EMULTI ");
				  return MiniParser.EMULTI;
				}
<YYINITIAL>{rollback}		{
				  addVal();
				  if (inMultiCmd)
				  	eatSemiColon = true;
				  inStatement = true;
				  return MiniParser.ROLLBACK;
				}

<YYINITIAL>{number}+		{ if(!inStatement) {
					try {
						value = Long.valueOf(yytext());
					} catch (NumberFormatException nfe) {
						value = SDMSConstants.lZERO;
				  		// System.out.print("NAN ");
						return MiniParser.NAN;
					}
				  	// System.out.print("INTEGER ");
					return MiniParser.INTEGER;
				  }
				  addVal();							break;		}
<YYINITIAL>[a-zA-Z]+		{ addVal();		inStatement = true;			break;		}

<COMMENT>"*/"			{ if(inStatement) addVal();		 yybegin(YYINITIAL);	break;		}
<COMMENT>[^*]+			{ if(inStatement) addVal();					break;		}
<COMMENT>\*			{ if(inStatement) addVal();					break;		}

<STRING>{no_bs_quote}+		{ addVal();		break;		}
<STRING>\\			{ addVal();		break;		}
<STRING>{bs_quote}		{ addVal("\\'");	break;		}
<STRING>\\\\			{ addVal("\\\\");	break;		}
<STRING>'			{ addVal("'");		yybegin(YYINITIAL); if (!inStatement) return MiniParser.STRING; break;	}

<FILESPEC>'			{ yybegin(FSSTR);	value = new String("");			break;		}
<FILESPEC>{nl}			{ /* do nothing */						break;		} 
<FILESPEC>{ws}			{ /* do nothing */						break;		}
<FILESPEC>{no_ws_quote}		{ addVal();
				  // System.out.print("INVALIDFILE ");
				  return MiniParser.INVALIDFILE;
				}

<FSSTR>{no_bs_quote}+		{ addVal();							break;		}
<FSSTR>\\			{ addVal();							break;		}
<FSSTR>{bs_quote}		{ addVal("\\'");						break;		}
<FSSTR>\\\\			{ addVal("\\\\");						break;		}
<FSSTR>'			{ yybegin(YYINITIAL);
				  String filename = value.toString();
				  File fname = new File(filename);
				  if(fname.isAbsolute()) {
					// absolute path -> don't prepend
					// System.out.println("(absolut) fname : " + fname.toString());
				  } else {
					// relative path -> prepend oldpath
					fname = new File(
						dirStack.size() > 0 ? 
							((String) dirStack.get(dirStack.size() - 1)) + File.separatorChar + filename :
							filename
						);
					// System.out.println("(relativ) fname : " + fname.toString());
				  }
				  startInclude(fname);
				  try {
					FileReader f = new FileReader(fname);
				  	yypushStream(f);
				  } catch (FileNotFoundException ffe) {
					// System.out.println("FILENOTFOUND ");
					return MiniParser.FILENOTFOUND;
				  }
				  value = new String("");
				  break;
				}
<SHELL>.+			{ addVal(); break; }
<SHELL>[\n\r]			{ yybegin(YYINITIAL);
				  // System.out.println("SHELLCMD ");
				  return MiniParser.SHELLCMD;
				}

<<EOF>>				{ if(yymoreStreams()) { endInclude(); yypopStream(); } else return YYEOF;
				  /* break; not necessary here because of fallthrough of default rule that ends the switch */
				}
